git status //spr statusu repozytorium
git add "nazwa pliku" //dodanie pliku o wskazanej nazwie aby był (trakowany) monitorowany przez git
git add . //dodanie wszystkich nowych plików w które pojawiły sie w repozytorium aby były monitorowane
git config --global user.email "test@gmail.com" //konfiguracja użytkownika który dodaje commit dodanie email
git config --global user.name "tester name" // konfiguracja użytkonwnika który dodaje commit dodanie imienia i nazwiska
git commit -m 'komentarz' //commit zmian do repozytprium ()
git commit -a -m 'konieczny komentarz do zmian' //dodanie pliku do repo i trakowanie zmian w jednej komendzie
git log //historia komita i komentarz
git log -p // histora jakie zmiany były prezentowana jak zmieniał się plik.
git checkout 11f8c9f71ee9bb27723f85bc634f81296613c6a5 //przepięcie się do innego commita, numer komita który mozn znaleść za pomocą git log
git checkout master //powrót na mastera
git clean -n //pokazuje jakie nietrakowane pliki zostaną usunięte
git clean -f // usunięcie nietrakowanych plików
git reset HEAD nazwapliku.txt //usunięcie trakowania wskazanego pliku

zarządzanie komitami
git revert f8c9f71ee9bb27723f85bc634f81296613c6a5 //wycofanie komitu, zachowanie historii 
git reset --hard f8c9f71ee9bb27723f85bc634f81296613c6a5 //cofnięcie zmian bez możliwości powrotu, usunięcie histori komitów.

Tworzenie nowego brancha
git checkout -b newFeature //utwórz branch o nazwie newFeature i przełącz na nowy branch
git branch //wyświetla listę dostępnych branchy i podświetla na zielono obecnie wybranyi
git checkout master //powrót do głównego brancha
git checkout newFeature //przełączenie się do brancha newFeature

łączenie zmian między branchami
git checkout master //przepinam się na brancha master
git merge newFeature //będąc na masterze merdzuję zmiany z brancha newFeature
